name: Extrair Portarias ANAC

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  extrair-portarias:
    runs-on: ubuntu-latest

    steps:
      - name: Verificar repositório
        uses: actions/checkout@v2

      - name: Configurar Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Instalar dependências
        run: |
          python -m pip install --upgrade pip
          pip install aiohttp pandas beautifulsoup4

      - name: Baixar e rodar o script
        run: |
          python -c "
import asyncio
import aiohttp
import pandas as pd
import re
from bs4 import BeautifulSoup

prefixo_url = 'https://www.anac.gov.br/assuntos/legislacao/legislacao-1/portarias/'
anos = range(2024, 1970, -1)
dados_tabela = []
urls_acessadas = set()
regex_nao_imprimiveis = re.compile(r'[\x00-\x1F\x7F]')

def extrair_dados_tabela(tabela, ano):
    cabecalho = [th.get_text(strip=True) for th in tabela.find_all('th')]
    if ano == 2020:
        cabecalho[1], cabecalho[2] = cabecalho[2], cabecalho[1]
    if not dados_tabela:
        dados_tabela.append(cabecalho)
    linhas = tabela.find_all('tr')
    for linha in linhas:
        colunas = linha.find_all(['th', 'td'])
        valores = []
        for coluna in colunas:
            links = coluna.find_all('a')
            if links:
                texto_links = [f'[{link.get_text(strip=True)}]({link["href"]})' for link in links]
                valor = ' '.join(texto_links)
            else:
                valor = coluna.get_text(strip=True)
            valor = regex_nao_imprimiveis.sub(' ', str(valor)).replace('|', ' ').replace('  ', ' ').strip()
            valores.append(valor)
        if not valores or valores == cabecalho:
            continue
        if ano == 2020:
            valores[1], valores[2] = valores[2], valores[1]
        dados_tabela.append(valores)

async def acessar_url(session, ano):
    url = f'{prefixo_url}{ano}'
    if url in urls_acessadas:
        return
    urls_acessadas.add(url)
    print(f'Acessando {url}...')
    async with session.get(url) as response:
        if response.status != 200:
            print(f'Página não encontrada para o ano {ano}. Pulando para o próximo ano.')
            return
        soup = BeautifulSoup(await response.text(), 'html.parser')
        tabela = soup.find('table', {'id': 'tabela-normas'})
        if tabela:
            extrair_dados_tabela(tabela, ano)

async def fetch_all():
    async with aiohttp.ClientSession() as session:
        tasks = [acessar_url(session, ano) for ano in anos]
        await asyncio.gather(*tasks)

async def main():
    if not asyncio.get_event_loop().is_running():
        await fetch_all()
    else:
        await fetch_all()

    if dados_tabela:
        cabecalho = ['Norma', 'Publicação', 'Ementa', 'Arquivo']
        df = pd.DataFrame(dados_tabela[1:], columns=cabecalho)
        df = df.dropna(how='all')
        df = df.drop_duplicates()

        def extrair_data(valor):
            match = re.search(r'(\\d{2}/\\d{2}/\\d{4})', str(valor))
            return match.group(0) if match else None

        df['Data'] = df['Norma'].apply(extrair_data)
        df.loc[pd.isna(df['Data']), 'Data'] = df.loc[pd.isna(df['Data']), 'Publicação'].apply(extrair_data)
        df['Data'] = pd.to_datetime(df['Data'], format='%d/%m/%Y', errors='coerce')
        df['Data'] = df['Data'].dt.strftime('%Y-%m-%d')

        df = df[~((df['Norma'] == 'Norma') & (df['Publicação'] == 'Data') & (df['Ementa'] == 'Ementa') & (df['Arquivo'] == 'Arquivo'))]

        def formatar_data(x):
            try:
                return pd.to_datetime(x, format='%d/%m/%Y').strftime('%Y-%m-%d')
            except ValueError:
                print(f'Erro ao formatar a data: {x}')
                return pd.NaT

        df['Data'] = df['Data'].mask(pd.isna(df['Data']), df['Publicação'].str.extract(r'(\\d{2}/\\d{2}/\\d{4})', expand=False).apply(formatar_data))

        cols = ['Data'] + [col for col in df.columns if col != 'Data']
        df = df[cols]

        df = df.sort_values(by=['Data', 'Norma'], ascending=[False, False])

        def exportar_markdown_simples(df, nome_arquivo):
            linhas = ['| ' + ' | '.join(df.columns) + ' |']
            linhas.append('| ' + ' | '.join(['---'] * len(df.columns)) + ' |')
            for _, row in df.iterrows():
                linha_formatada = [
                    regex_nao_imprimiveis.sub(' ', str(valor)).replace('|', ' ').replace('  ', ' ')
                    for valor in row.values
                ]
                linhas.append('| ' + ' | '.join(linha_formatada) + ' |')

            with open(nome_arquivo, 'w') as f:
                f.write('\\n'.join(linhas))

        exportar_markdown_simples(df, 'portarias-anac.md')

await main()
          "
      - name: Commit e push do arquivo
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add portarias-anac.md
          git commit -m "Atualizar portarias ANAC"
          git push
