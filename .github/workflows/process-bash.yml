name: 'Processamento com BASH + jq'

on:
  workflow_dispatch:

jobs:
  build-with-bash:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Instalar jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Baixar e Processar Dados com Bash e jq
        run: |
          # Etapa 1: Baixar o JSON original
          echo "Baixando o arquivo JSON..."
          curl -s -o source.json 'https://estruturaorganizacional.dados.gov.br/doc/estrutura-organizacional/completa.json?codigoPoder=1&codigoEsfera=1&codigoUnidade=86144&retornarOrgaoEntidadeVinculados=SIM'

          # Etapa 2: Pré-processar o JSON para um formato mais simples e rápido de consultar
          # Isso cria uma lista de objetos, um por linha, para facilitar o processamento com grep/jq
          echo "Pré-processando JSON..."
          jq -c '.unidades[] | {sigla: .sigla, nome: .nome, competencia: .competencia, municipio: .endereco.municipio, uf: .endereco.uf, cep: .endereco.cep, codigoUnidade: (.codigoUnidade | split("/")[-1]), codigoUnidadePai: (.codigoUnidadePai | split("/")[-1])}' source.json > unidades.jsonl

          # Etapa 3: Processar cada unidade para adicionar os campos corrigidos
          echo "Processando cada unidade..."
          output_json_array=()
          while IFS= read -r unidade_json; do
            # Extrair dados básicos da unidade atual
            sigla=$(echo "$unidade_json" | jq -r '.sigla')
            nome=$(echo "$unidade_json" | jq -r '.nome')
            codigo_unidade=$(echo "$unidade_json" | jq -r '.codigoUnidade')
            codigo_pai_atual=$(echo "$unidade_json" | jq -r '.codigoUnidadePai')

            # Lógica para encontrar o caminho completo da sigla (siglaCompleta)
            caminho=($sigla)
            while [[ "$codigo_pai_atual" != "null" && ! -z "$codigo_pai_atual" ]]; do
              # Encontra a linha do pai no arquivo pré-processado
              unidade_pai_json=$(grep "\"codigoUnidade\":\"$codigo_pai_atual\"" unidades.jsonl)
              if [[ -z "$unidade_pai_json" ]]; then break; fi
              
              sigla_pai=$(echo "$unidade_pai_json" | jq -r '.sigla')
              codigo_pai_atual=$(echo "$unidade_pai_json" | jq -r '.codigoUnidadePai')
              caminho=("$sigla_pai" "${caminho[@]}")
            done
            sigla_completa=$(IFS=/ ; echo "${caminho[*]}")

            # Lógica especial para NURACs
            if [[ "$sigla" == "NURAC"* ]]; then
              cidade=$(echo "$nome" | cut -d' ' -f7)
              estado=$(echo "$nome" | cut -d' ' -f8 | tr -d '()')
              sigla_corrigida="NURAC $cidade $estado"
              partes_caminho=(${sigla_completa//\// })
              sigla_completa_corrigida="${partes_caminho[0]}/${partes_caminho[1]}/${partes_caminho[2]}/$sigla_corrigida"
            else
              sigla_corrigida=$sigla
              sigla_completa_corrigida=$sigla_completa
            fi
            
            # Adiciona os novos campos ao JSON da unidade e adiciona ao array final
            unidade_final=$(echo "$unidade_json" | jq --arg sc "$sigla_corrigida" --arg scc "$sigla_completa_corrigida" '. + {siglaCorrigida: $sc, siglaCompletaCorrigida: $scc}')
            output_json_array+=("$unidade_final")

          done < unidades.jsonl
          
          # Junta todos os JSONs individuais em um único array JSON
          printf "%s\n" "${output_json_array[@]}" | jq -s . > estrutura-sh.json
          echo "Arquivo estrutura-sh.json gerado."

      - name: Gerar Arquivo HTML com base no JSON
        run: |
          echo "Gerando arquivo HTML..."
          {
            echo '<!DOCTYPE html><html lang="pt-BR"><head><meta charset="UTF-8"><title>Estrutura ANAC (Bash)</title></head><body>'
            echo '<h1>Estrutura Organizacional ANAC (Gerado com Bash + jq)</h1>'
            echo '<table border="1"><thead><tr><th>Sigla</th><th>Sigla Completa</th><th>Nome</th><th>UF</th></tr></thead><tbody>'
            jq -r '.[] | "<tr><td>\(.siglaCorrigida)</td><td>\(.siglaCompletaCorrigida)</td><td>\(.nome)</td><td>\(.uf)</td></tr>"' estrutura-sh.json
            echo '</tbody></table>'
            echo '</body></html>'
          } > estrutura-sh.html
          echo "Arquivo estrutura-sh.html gerado."

      - name: Salvar Artefatos (Bash)
        uses: actions/upload-artifact@v4
        with:
          name: resultado-bash
          path: |
            estrutura-sh.json
            estrutura-sh.html
